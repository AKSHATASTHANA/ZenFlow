<%@ Page Language="vb" AutoEventWireup="false" CodeBehind="Gantt.aspx.vb" Inherits="QCopGanttVB.Gantt" %>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <meta charset="utf-8" />
    <title>Project Dashboard</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="stylesheet" href="https://cdn.dhtmlx.com/gantt/edge/dhtmlxgantt.css" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:400,700|Montserrat:600&display=swap" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(120deg, #e0eafc 0%, #cfdef3 100%);
            font-family: 'Roboto', Arial, sans-serif;
            margin: 0;
            padding: 0;
        }
        .dashboard-container {
            max-width: 98vw;
            margin: 40px auto;
            background: #fff;
            border-radius: 18px;
            box-shadow: 0 8px 32px rgba(8,106,151,0.10), 0 1.5px 8px rgba(33,150,243,0.08);
            padding: 32px 36px 28px 36px;
        }
        h2 {
            font-family: 'Montserrat', Arial, sans-serif;
            font-weight: 600;
            color: #086A97;
            text-align: center;
            margin-top: 0;
            margin-bottom: 30px;
            letter-spacing: 1px;
        }
        .tab-bar {
            display: flex;
            gap: 3px;
            margin-bottom: 22px;
            border-bottom: 2px solid #dbeaf7;
            justify-content: center;
        }
        .tab-btn {
            background: none;
            border: none;
            border-bottom: 3px solid transparent;
            color: #086A97;
            font-size: 1.13rem;
            font-family: 'Montserrat', Arial, sans-serif;
            font-weight: 600;
            padding: 9px 34px 9px 34px;
            cursor: pointer;
            transition: border-color 0.2s, color 0.2s;
        }
        .tab-btn.active {
            color: #2196F3;
            border-bottom: 3px solid #2196F3;
            background: #e7f5fe;
        }
        .tab-section { display: none; }
        .tab-section.active { display: block;}

        /* Action Bar Styles */
        .gantt-action-bar {
            display: flex;
            flex-wrap: wrap;
            gap: 18px;
            margin-bottom: 9px;
            justify-content: center;
        }
        .gantt-action-group {
            display: flex;
            gap: 7px;
            align-items: center;
        }
        .gantt-btn, .dropdown > button {
            background: linear-gradient(90deg, #2196F3 0%, #21cbf3 100%);
            color: #fff;
            border: none;
            border-radius: 6px;
            padding: 5px 13px;
            font-size: 0.6rem;
            font-family: 'Montserrat', Arial, sans-serif;
            font-weight: 600;
            box-shadow: 0 1.5px 7px rgba(33,150,243,0.10);
            cursor: pointer;
            transition: background 0.18s, box-shadow 0.18s, color 0.18s;
            outline: none;
            line-height: 1.15;
        }
        .gantt-btn:not(:last-child) {
            margin-right: 3px;
        }
        .gantt-btn:hover, .dropdown > button:hover {
            background: linear-gradient(90deg, #21cbf3 0%, #2196F3 100%);
            color: #fff;
            box-shadow: 0 3px 12px rgba(33,150,243,0.18);
        }
        .gantt-btn.active {
            background: linear-gradient(90deg, #1976d2 0%, #64b5f6 100%);
            color: #fff;
        }
        .dropdown {
            position: relative;
            display: inline-block;
        }
        .dropdown > button {
            min-width: 50px;
            padding: 5px 13px;
            font-size: 0.7rem;
        }
        .dropdown-content {
            display: none;
            position: absolute;
            min-width: 170px;
            z-index: 10;
            background: #fff;
            border-radius: 7px;
            box-shadow: 0 2px 12px rgba(33,150,243,0.2);
            margin-top: 6px;
            padding: 0;
            right: 0;
        }
        .dropdown-content button {
            background: none;
            border: none;
            width: 100%;
            text-align: left;
            padding: 8px 15px;
            cursor: pointer;
            color: #086A97;
            font-size: 0.98rem;
            font-family: 'Montserrat', Arial, sans-serif;
            transition: background 0.13s;
        }
        .dropdown-content button:hover {
            background: #e7f5fe;
        }
        .dropdown.show .dropdown-content {
            display: block;
        }
        #toggleColumnsBtn {
            min-width: 120px;
            background: linear-gradient(90deg, #4caf50 0%, #81c784 100%);
            color: #fff;
            padding: 5px 13px;
            font-size: 0.7rem;
        }
        #toggleColumnsBtn:hover {
            background: linear-gradient(90deg, #388e3c 0%, #a5d6a7 100%);
            color: #fff;
        }
        #gantt_here {
            height: 520px;
            min-width: 1000px;
            border-radius: 8px;
            box-shadow: 0 1.5px 7px rgba(33,150,243,0.05);
            background: #f4fafd;
        }
        /* Board (Kanban) styling */
        .board-wrapper {
            width: 100%;
            overflow-x: auto;
            margin-bottom: 10px;
            padding-bottom: 12px;
        }
        .board {
            display: flex;
            gap: 24px;
            min-width: 700px;
        }
        .board-column {
            background: #f7fbfd;
            border-radius: 10px;
            box-shadow: 0 1.5px 8px rgba(33,150,243,0.06);
            padding: 18px 11px 18px 11px;
            min-width: 230px;
            flex: 1 1 0px;
        }
        .board-column h3 {
            text-align: center;
            color: #086A97;
            font-size: 1rem;
            margin: 0 0 14px 0;
            font-family: 'Montserrat', Arial, sans-serif;
        }
        .board-card {
            background: #fff;
            border-radius: 7px;
            margin-bottom: 10px;
            padding: 10px 12px;
            box-shadow: 0 1.5px 6px rgba(33,150,243,0.08);
            border-left: 4px solid #2196F3;
            font-size: 15px;
            font-weight: 500;
        }
        .board-card:last-child { margin-bottom: 0; }
        /* Milestones */
        .milestones-table {
            width: 100%;
            border-collapse: collapse;
            margin: 0 auto 30px auto;
            background: #f7fbfd;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 1.5px 8px rgba(33,150,243,0.06);
        }
        .milestones-table th, .milestones-table td {
            padding: 11px 16px;
            text-align: center;
            font-size: 1rem;
        }
        .milestones-table th {
            background: #086A97;
            color: #fff;
            font-family: 'Montserrat', Arial, sans-serif;
            font-weight: 600;
        }
        .milestones-table td {
            border-bottom: 1px solid #eaeaea;
            background: #fff;
        }
        .milestone-status.done { color: #2e7d32; font-weight: 600;}
        .milestone-status.inprogress { color: #1976d2; font-weight: 600;}
        .milestone-status.pending { color: #d32f2f; font-weight: 600;}
        @media (max-width: 900px) {
            .dashboard-container { padding: 12px 4px 12px 4px; border-radius: 7px;}
            #gantt_here { min-width: 800px;}
        }
        @media (max-width: 600px) {
            #gantt_here { min-width: 600px; }
            .board { min-width: 480px; }
            .milestones-table th, .milestones-table td { font-size: 0.95rem; }
            .gantt-btn, .dropdown > button, #toggleColumnsBtn {
                font-size: 0.88rem;
                padding: 4px 8px;
            }
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <h2>Project Dashboard</h2>
        <!-- Tab Bar -->
        <div class="tab-bar">
            <button class="tab-btn active" onclick="showTab('gantt')">Gantt</button>
            <button class="tab-btn" onclick="showTab('board')">Board</button>
            <button class="tab-btn" onclick="showTab('milestones')">Milestones</button>
        </div>
        <!-- Gantt Section -->
        <div id="tab-gantt" class="tab-section active">
            <div class="gantt-action-bar">
                <div class="gantt-action-group">
                    <button type="button" class="gantt-btn" id="btnDay" onclick="setScale('day'); setActiveScale(this)">Day</button>
                    <button type="button" class="gantt-btn" id="btnMonth" onclick="setScale('month'); setActiveScale(this)">Month</button>
                    <button type="button" class="gantt-btn active" id="btnYear" onclick="setScale('year'); setActiveScale(this)">Year</button>
                </div>
                <div class="gantt-action-group dropdown" id="exportDropdown">
                    <button type="button" class="gantt-btn" onclick="toggleDropdown('exportDropdown')">Export</button>
                    <div class="dropdown-content">
                        <button type="button" onclick="gantt.exportToExcel({ name: 'gantt.xlsx' }); closeDropdown('exportDropdown')">Export to Excel</button>
                        <button type="button" onclick="gantt.exportToPDF({ name: 'gantt.pdf' }); closeDropdown('exportDropdown')">Export to PDF</button>
                    </div>
                </div>
                <div class="gantt-action-group dropdown" id="importDropdown">
                    <button type="button" class="gantt-btn" onclick="toggleDropdown('importDropdown')">Import</button>
                    <div class="dropdown-content">
                        <button type="button" onclick="alert('Import from Excel feature to be implemented.'); closeDropdown('importDropdown')">Import from Excel</button>
                        <button type="button" onclick="alert('Import from MS Project feature to be implemented.'); closeDropdown('importDropdown')">Import from MS Project</button>
                    </div>
                </div>
                <div class="gantt-action-group">
                    <button id="toggleColumnsBtn" class="gantt-btn" onclick="toggleColumns()">Show More Columns</button>
                </div>
            </div>
            <div style="overflow-x:auto;">
                <div id="gantt_here"></div>
            </div>
        </div>
        <!-- Board Section -->
        <div id="tab-board" class="tab-section">
            <div class="board-wrapper">
                <div class="board" id="kanbanBoard"></div>
            </div>
        </div>
        <!-- Milestones Section -->
        <div id="tab-milestones" class="tab-section">
            <table class="milestones-table">
                <thead>
                    <tr>
                        <th>Milestone</th>
                        <th>Target Date</th>
                        <th>Status</th>
                        <th>Owner</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody id="milestoneTableBody">
                </tbody>
            </table>
        </div>
    </div>
    <!-- PHOTO/MAT DETAILS POPUP MODAL HTML -->
    <div id="popupModal" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; z-index:9999; background:rgba(0,0,0,0.38);">
        <div id="popupContent" style="background:#fff; border-radius:10px; box-shadow:0 4px 21px #0002; max-width:480px; margin:50px auto; padding:32px 28px 23px 28px; position:relative;">
            <button onclick="closePopup()" style="position:absolute; top:8px; right:16px; background:none; border:none; font-size:1.3em; color:#888; cursor:pointer;">&times;</button>
            <div id="popupBody"></div>
        </div>
    </div>
    <script src="https://cdn.dhtmlx.com/gantt/edge/dhtmlxgantt.js"></script>
    <script src="https://export.dhtmlx.com/gantt/api.js"></script>
    <script>
        // TAB SWITCHING
        function showTab(tab) {
            document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
            document.querySelectorAll('.tab-section').forEach(sec => sec.classList.remove('active'));
            document.querySelector('.tab-btn[onclick*="' + tab + '"]').classList.add('active');
            document.getElementById('tab-' + tab).classList.add('active');
            if (tab === "gantt" && window.gantt) setTimeout(() => { gantt.setSizes(); }, 120);
        }
        // Dropdown logic
        function toggleDropdown(id) {
            document.querySelectorAll('.dropdown').forEach(drop => {
                if (drop.id !== id) drop.classList.remove('show');
            });
            const dropdown = document.getElementById(id);
            dropdown.classList.toggle('show');
        }
        function closeDropdown(id) {
            document.getElementById(id).classList.remove('show');
        }
        window.onclick = function (event) {
            if (!event.target.matches('.dropdown > button')) {
                document.querySelectorAll('.dropdown').forEach(drop => drop.classList.remove('show'));
            }
        }
        // GANTT CHART SECTION (minimalColumns and fullColumns use View Details buttons for Photo/Mat)
        gantt.config.xml_date = "%Y-%m-%d %H:%i";
        gantt.config.show_links = true;
        gantt.config.show_progress = true;
        gantt.plugins({ tooltip: true });

        gantt.templates.task_text = () => "";
        gantt.templates.progress_text = (start, end, task) => Math.round((task.progress || 0) * 100) + "%";
        gantt.templates.tooltip_text = function (start, end, task) {
            return `
            <b>Activity:</b> ${task.activity || ""}<br/>
            <b>Sub Activity:</b> ${task.subActivity || ""}<br/>
            <b>Hierarchy:</b> ${[task.l1, task.l2, task.l3, task.l4].filter(Boolean).join("&gt;")}<br/>
            <b>Start:</b> ${gantt.templates.tooltip_date_format(start)}<br/>
            <b>End:</b> ${gantt.templates.tooltip_date_format(end)}<br/>
            <b>Actual Start:</b> ${task.actual_start_date || "—"}<br/>
            <b>Actual End:</b> ${task.actual_end_date || "—"}<br/>
            <b>Contractor:</b> ${task.contractor || "—"}<br/>
            <b>Mat1:</b> ${task.mat1 || ""} <b>Unit1:</b> ${task.unit1 || ""} <b>Quan1:</b> ${task.quan1 || ""}<br/>
            <b>Mat2:</b> ${task.mat2 || ""} <b>Unit2:</b> ${task.unit2 || ""} <b>Quan2:</b> ${task.quan2 || ""}<br/>
            <b>Mat3:</b> ${task.mat3 || ""} <b>Unit3:</b> ${task.unit3 || ""} <b>Quan3:</b> ${task.quan3 || ""}<br/>
            <b>Progress:</b> ${Math.round((task.progress || 0) * 100)}%<br/>
            <b>Duration:</b> ${task.duration || 1} day(s)<br/>
            <b>Last Updated By:</b> <span class="gantt_updated_by_cell">${task.updated_by || "—"}</span>
        `;
        };

        function setActiveScale(btn) {
            document.querySelectorAll('.gantt-action-group .gantt-btn').forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
        }

        const minimalColumns = [
            {
                name: "activity",
                label: "Activity",
                width: 120,
                tree: true,
                template: obj => `${obj.activity || ""}`
            },
            {
                name: "subActivity",
                label: "Sub Activity",
                width: 120,
                align: "center",
                template: obj => `${obj.subActivity || ""}`
            },
            { name: "start_date", label: "Start", align: "center", width: 90 },
            {
                name: "end_date", label: "End", align: "center", width: 90,
                template: obj => {
                    const start = gantt.date.parseDate(obj.start_date, gantt.config.xml_date);
                    const duration = obj.duration || 1;
                    const end = gantt.calculateEndDate(start, duration);
                    return gantt.templates.date_grid(end);
                }
            },
            {
                name: "progress", label: "Progress", align: "center", width: 70,
                template: obj => Math.round((obj.progress || 0) * 100) + "%"
            },
            { name: "add", label: "", width: 44 }
        ];
        const fullColumns = [
            minimalColumns[0],
            minimalColumns[1],
            {
                name: "hierarchy", label: "Location", width: 140, align: "center",
                template: obj => {
                    const levels = [obj.l1, obj.l2, obj.l3, obj.l4].filter(Boolean);
                    return levels.length ? `<span class="gantt_hierarchy_cell">${levels.join("&gt;")}</span>` : "";
                }
            },
            ...minimalColumns.slice(2),
            { name: "actual_start_date", label: "Actual Start", align: "center", width: 110, template: obj => obj.actual_start_date || '<span style="color:#888;">—</span>' },
            { name: "actual_end_date", label: "Actual End", align: "center", width: 110, template: obj => obj.actual_end_date || '<span style="color:#888;">—</span>' },
            { name: "contractor", label: "Contractor", align: "center", width: 110, template: obj => obj.contractor || '<span style="color:#888;">—</span>' },
            {
                name: "Photo", label: "Photo", align: "center", width: 70,
                template: obj => `<button class="gantt-btn" onclick="event.stopPropagation();showPhotoPopup(this, '${encodeURIComponent(obj.mat1 || "")}', '${encodeURIComponent(obj.id)}')">View Details</button>`
            },
            {
                name: "Mat Details", label: "Mat Details", align: "center", width: 90,
                template: obj => `<button class="gantt-btn" onclick="event.stopPropagation();showMatPopup(this, '${encodeURIComponent(obj.id)}')">View Details</button>`
            },
            {
                name: "updated_by", label: "Last Updated By", align: "center", width: 140,
                template: obj => obj.updated_by
                    ? `<span class="gantt_updated_by_cell">${obj.updated_by}</span>`
                    : `<span style="color:#888;">—</span>`
            }
        ];

        // --- POPUP SCRIPTS ---
        function closePopup() {
            document.getElementById('popupModal').style.display = 'none';
            document.getElementById('popupBody').innerHTML = "";
        }

        function showPhotoPopup(btn, photoUrl, taskId) {
            // For now, always use the fixed image file, regardless of the input
            let fixedImage = "stamped_Civil_Block Work_20250528125203595113.jpg";
            let fullUrl = "https://q-cop.in/QCop/dfctImages/2/" + fixedImage;
            let photoHtml = `
        <img src="${fullUrl}" alt="Task Photo" style="max-width:100%;border-radius:7px;box-shadow:0 1.5px 7px #0002;">
        <div style="margin-top:7px;font-size:13px;color:#555;">Photo for Task ID: <b>${taskId}</b></div>
        <div style="margin-top:5px;font-size:12px;color:#888;">(${fullUrl})</div>
    `;
            document.getElementById('popupBody').innerHTML = `<h3 style="margin-top:0;margin-bottom:13px;">Photo Details</h3>` + photoHtml;
            document.getElementById('popupModal').style.display = 'block';
        }
        

        function showMatPopup(btn, taskId) {
            const task = gantt.getTask(taskId);
            let matRows = "";

            // Header row for material names
            matRows += `
        <tr style="background:#e3f1fd">
            <th>Material</th>
            <th>Quantity</th>
            <th>Unit</th>
        </tr>
        <tr>
            <td colspan="3" style="padding:0;">
                <table style="width:100%;border-collapse:collapse;">
                    <tr>
                        <td style="width:33.33%;border-right:1px solid #e5e5e5;padding:0;">
                            <div style="display:flex;">
                                <div style="flex:1;border-right:1px solid #e5e5e5;text-align:center;font-size:11px;color:#888;">Actual</div>
                                <div style="flex:1;text-align:center;font-size:11px;color:#888;">Planned</div>
                            </div>
                        </td>
                        <td style="width:33.33%;border-right:1px solid #e5e5e5;padding:0;">
                            <div style="display:flex;">
                                <div style="flex:1;border-right:1px solid #e5e5e5;text-align:center;font-size:11px;color:#888;">Actual</div>
                                <div style="flex:1;text-align:center;font-size:11px;color:#888;">Planned</div>
                            </div>
                        </td>
                        <td style="width:33.33%;padding:0;">
                            <div style="display:flex;">
                                <div style="flex:1;border-right:1px solid #e5e5e5;text-align:center;font-size:11px;color:#888;">Actual</div>
                                <div style="flex:1;text-align:center;font-size:11px;color:#888;">Planned</div>
                            </div>
                        </td>
                    </tr>
    `;

            // Now rows for each material set
            for (let i = 1; i <= 3; ++i) {
                const matActual = task[`mat${i}_actual`] || "";
                const matPlanned = task[`mat${i}`] || "";
                const quanActual = task[`quan${i}_actual`] || "";
                const quanPlanned = task[`quan${i}`] || "";
                const Unit = task[`unit{i}`] || "";

                // Only show row if any value exists
                if (matActual || matPlanned || quanActual || quanPlanned) {
                    matRows += `
                <tr>
                    <td style="padding:0;">
                        <div style="display:flex;">
                            <div style="flex:1;border-right:1px solid #e5e5e5;text-align:center;">${matActual}</div>
                            <div style="flex:1;text-align:center;">${matPlanned}</div>
                        </div>
                    </td>
                    <td style="padding:0;">
                        <div style="display:flex;">
                            <div style="flex:1;border-right:1px solid #e5e5e5;text-align:center;">${quanActual}</div>
                            <div style="flex:1;text-align:center;">${quanPlanned}</div>
                        </div>
                    </td>
                    <td style="padding:0;">
                        <div style="display:flex;">
                            <div style="flex:1;border-right:1px solid #e5e5e5;text-align:center;">${unit}</div>
                        </div>
                    </td>
                </tr>
            `;
                }
            }

            matRows += `
                </table>
            </td>
        </tr>
    `;

            // If no values at all, show empty row
            if (!/>([^<]+)<\/div>/.test(matRows)) {
                matRows = `<tr><td colspan="3" style="color:#888;">No material items for this task.</td></tr>`;
            }

            document.getElementById('popupBody').innerHTML = `
        <h3 style="margin-top:0;margin-bottom:13px;">Material Details (Task ID: ${taskId})</h3>
        <table style="width:100%;border-collapse:collapse;margin-bottom:10px;">
            ${matRows}
        </table>
    `;
            document.getElementById('popupModal').style.display = 'block';
        }

        let isExpanded = false;
        let initialGridWidth = 0;

        function toggleColumns() {
            isExpanded = !isExpanded;
            if (!initialGridWidth) initialGridWidth = gantt.config.grid_width;
            if (isExpanded) {
                gantt.config.columns = fullColumns;
                gantt.config.grid_width = 2500;
                document.getElementById("toggleColumnsBtn").innerText = "Show Fewer Columns";
                document.getElementById("gantt_here").style.minWidth = "2500px";
            } else {
                gantt.config.columns = minimalColumns;
                gantt.config.grid_width = initialGridWidth;
                document.getElementById("toggleColumnsBtn").innerText = "Show More Columns";
                document.getElementById("gantt_here").style.minWidth = initialGridWidth + "px";
            }
            gantt.render();
            gantt.setSizes();
        }
        function setScale(scale) {
            switch (scale) {
                case "day":
                    gantt.config.scales = [{ unit: "day", step: 1, format: "%d %M" }];
                    gantt.config.scale_height = 50; break;
                case "month":
                    gantt.config.scales = [
                        { unit: "month", step: 1, format: "%F, %Y" },
                        { unit: "day", step: 1, format: "%j" }
                    ];
                    gantt.config.scale_height = 60; break;
                case "year":
                    gantt.config.scales = [
                        { unit: "year", step: 1, format: "%Y" },
                        { unit: "month", step: 1, format: "%M" }
                    ];
                    gantt.config.scale_height = 60; break;
            }
            gantt.render();
        }
        function getParam(name) {
            const url = new URL(window.location.href);
            return url.searchParams.get(name) || "0";
        }
        function buildApiUrl() {
            const prjID = getParam('prjID');
            const residence = getParam('residence');
            const floor = getParam('floor');
            const flat = getParam('flat');
            const activity = getParam('activity');
            const subActivity = getParam('subActivity');
            return "GanttData.ashx"
                + "?prjID=" + encodeURIComponent(prjID)
                + "&residence=" + encodeURIComponent(residence)
                + "&floor=" + encodeURIComponent(floor)
                + "&flat=" + encodeURIComponent(flat)
                + "&activity=" + encodeURIComponent(activity)
                + "&subActivity=" + encodeURIComponent(subActivity);
        }
        // INIT
        gantt.config.columns = minimalColumns;
        gantt.config.grid_width = 550;
        setScale("year");
        gantt.init("gantt_here");
        gantt.load(buildApiUrl(), "json");
        gantt.addMarker({
            start_date: new Date(),
            css: "today",
            text: "Today",
            title: "Today"
        });

        // ---- BOARD (KANBAN) SAMPLE DATA ----
        // ... Board and Milestone sample JS unchanged; renderBoard and renderMilestones as in your original code ...
        function renderBoard() {
            // sampleTasks array should be defined elsewhere or fetched
        }
        function renderMilestones() {
            // sampleMilestones array should be defined elsewhere or fetched
        }
        renderBoard();
        renderMilestones();
    </script>
</body>
</html>